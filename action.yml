name: 'Prepare variables'
description: 'Prepare variables for micro service deployment'

inputs:
  instances_prod:
    description: 'Production instances'
    required: true

  instances_dev:
    description: 'Development instances'
    required: true

  cloudflare_zone_prod:
    description: 'Production DNS zone'
    required: true

  cloudflare_zone_dev:
    description: 'Development DNS zone'
    required: true

outputs:
  version:
    description: "Package version"
    value: ${{ steps.values.outputs.version }}

  instances:
    description: "Service instances"
    value: ${{ steps.values.outputs.instances }}

  build:
    description: "Build type"
    value: ${{ steps.values.outputs.build }}

  slack:
    description: "Slack message"
    value: ${{ steps.values.outputs.slack }}

  name:
    description: "Package name"
    value: ${{ steps.values.outputs.name }}

  repository:
    description: "Package repository"
    value: ${{ steps.values.outputs.repository }}

  hostname:
    description: "Hostname"
    value: ${{ steps.values.outputs.hostname }}

  cloudflare_ip:
    description: "External IP address of the service"
    value: ${{ steps.values.outputs.cloudflare_ip }}

  cloudflare_zone:
    description: "Cloudflare DNS zone"
    value: ${{ steps.values.outputs.cloudflare_zone }}

runs:
  using: "composite"
  steps:
    - name: Install node
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Prepare version for PROD
      shell: bash
      if: "!github.event.release.prerelease"
      run: |
        echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

    - name: Prepare version for DEV
      shell: bash
      if: "github.event.release.prerelease"
      run: |
        echo "VERSION=${GITHUB_REF/refs\/tags\//}-rc${{github.run_number}}" >> $GITHUB_ENV

    - name: Set NPM version
      shell: bash
      if: "github.event.release.prerelease"
      run: |
        npm version ${{ env.VERSION }} --no-git-tag-version

    - name: Lower case image name
      id: lower
      uses: ASzc/change-string-case-action@v1
      with:
        string: ${{ github.repository }}

    - name: Get service name without owner
      id: replace
      uses: mad9000/actions-find-and-replace-string@2
      with:
          source: ${{ steps.lower.outputs.lowercase }}
          find: 'sysarb/'
          replace: ''

    - name: Set PROD env
      shell: bash
      if: "!github.event.release.prerelease"
      run: |
        echo "BUILD_TYPE=prod" >> $GITHUB_ENV
        echo "SLACK_MESSAGE=${{ github.event.repository.name }} ${{ env.VERSION}} released to PROD" >> $GITHUB_ENV
        echo "INSTANCES=${{ inputs.instances_prod }}" >> $GITHUB_ENV
        echo "TOP_DOMAIN=app" >> $GITHUB_ENV
        echo "CLOUDFLARE_IP=109.74.10.131" >> $GITHUB_ENV
        echo "CLOUDFLARE_ZONE=${{ inputs.cloudflare_zone_prod }}" >> $GITHUB_ENV

    - name: Set DEV env
      shell: bash
      if: "github.event.release.prerelease"
      run: |
        echo "BUILD_TYPE=dev" >> $GITHUB_ENV
        echo "SLACK_MESSAGE=${{ github.event.repository.name }} ${{ env.VERSION }} released to DEV" >> $GITHUB_ENV
        echo "INSTANCES=${{ inputs.instances_dev }}" >> $GITHUB_ENV
        echo "TOP_DOMAIN=dev" >> $GITHUB_ENV
        echo "CLOUDFLARE_IP=192.168.3.200" >> $GITHUB_ENV
        echo "CLOUDFLARE_ZONE=${{ inputs.cloudflare_zone_dev }}" >> $GITHUB_ENV

    - name: Get Cloudflare variables
      shell: bash
      run: |
        echo "CLOUDFLARE_HOST=$(grep -s -A0 'host:' ./manifests/ingress.yaml | tail -n1 | awk '{ gsub("\\[TOP_DOMAIN\\]", "${{ env.TOP_DOMAIN }}", $3); print $3 }'" >> $GITHUB_ENV

    - name: Set values
      id: values
      shell: bash
      run: |
        echo "::set-output name=name::${{ steps.replace.outputs.value }}"
        echo "::set-output name=repository::${{ steps.lower.outputs.lowercase }}"
        echo "::set-output name=version::${{ env.VERSION }}"
        echo "::set-output name=instances::${{ env.INSTANCES }}"
        echo "::set-output name=build::${{ env.BUILD_TYPE }}"
        echo "::set-output name=slack::${{ env.SLACK_MESSAGE }}"
        echo "::set-output name=hostname::${{ env.CLOUDFLARE_HOST }}"
        echo "::set-output name=cloudflare_ip::${{ env.CLOUDFLARE_IP }}"
        echo "::set-output name=cloudflare_zone::${{ env.CLOUDFLARE_ZONE }}"
